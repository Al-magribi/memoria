{"version":3,"file":"Message-BU7obJmn.js","sources":["../../src/pages/message/ChatList.jsx","../../src/pages/message/ChatHeader.jsx","../../src/pages/message/ChatMessages.jsx","../../src/pages/message/ChatInput.jsx","../../src/pages/message/Message.jsx"],"sourcesContent":["import React from \"react\";\nimport { IoCheckmarkDone } from \"react-icons/io5\";\n\nconst ChatList = ({\n  chats = [],\n  filteredFriends = [],\n  searchQuery = \"\",\n  onSearchChange,\n  onSearchFocus,\n  onSearchBlur,\n  onFriendSelect,\n  onChatSelect,\n  selectedChat,\n  showSearchResults,\n  onlineUsers = new Set(),\n}) => {\n  return (\n    <div className='chat-list'>\n      <div className='chat-list-header'>\n        <h2>Messages</h2>\n        <div className='search-box'>\n          <input\n            type='text'\n            placeholder='Search friends...'\n            value={searchQuery}\n            onChange={onSearchChange}\n            onFocus={onSearchFocus}\n            onBlur={onSearchBlur}\n          />\n        </div>\n      </div>\n      <div className='chat-items'>\n        {showSearchResults && searchQuery ? (\n          filteredFriends.length > 0 ? (\n            filteredFriends.map((friend) => (\n              <div\n                key={friend.id}\n                className='chat-item search-result'\n                onClick={() => onFriendSelect(friend)}\n              >\n                <div className='chat-avatar'>\n                  <img\n                    src={friend.profilePicture || \"/profiles/user.jpg\"}\n                    alt={friend.username}\n                  />\n                  {onlineUsers.has(friend.id) && (\n                    <div className='online-indicator'></div>\n                  )}\n                </div>\n                <div className='chat-info'>\n                  <div className='chat-header'>\n                    <h4>{friend.username}</h4>\n                  </div>\n                  <div className='chat-preview'>\n                    <p>\n                      {friend.firstName} {friend.lastName}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className='no-search-results'>\n              <p>No friends found matching \"{searchQuery}\"</p>\n            </div>\n          )\n        ) : (\n          chats.map((chat) => (\n            <div\n              key={chat.id}\n              className={`chat-item ${\n                selectedChat?.id === chat.id ? \"active\" : \"\"\n              }`}\n              onClick={() => onChatSelect(chat)}\n            >\n              <div className='chat-avatar'>\n                <img src={chat.avatar} alt={chat.name} />\n                {onlineUsers.has(chat.participantId) && (\n                  <div className='online-indicator'></div>\n                )}\n              </div>\n              <div className='chat-info'>\n                <div className='chat-header'>\n                  <h4>{chat.name}</h4>\n                  <span className='chat-time'>{chat.time}</span>\n                </div>\n                <div className='chat-preview'>\n                  <p style={{ fontStyle: \"italic\" }}>\n                    {chat.lastMessageType === \"image\"\n                      ? \"image\"\n                      : chat.lastMessageType === \"video\"\n                      ? \"video\"\n                      : chat.lastMessage}\n                  </p>\n                  {chat.unread > 0 && (\n                    <div className='unread-badge'>{chat.unread}</div>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatList;\n","import React from \"react\";\nimport * as Fa from \"react-icons/fa\";\n\nconst ChatHeader = ({ user, isMobile, onBack, online }) => {\n  return (\n    <div className='chat-header'>\n      {isMobile && (\n        <button className='back-btn' onClick={onBack}>\n          <Fa.FaArrowLeft />\n        </button>\n      )}\n      <div className='chat-user-info'>\n        <div className='chat-avatar'>\n          <img\n            src={user.avatar || user.profilePicture || \"/profiles/user.jpg\"}\n            alt={user.name || user.username}\n          />\n          {online && <div className='online-indicator'></div>}\n        </div>\n        <div>\n          <h3>{user.name || user.username}</h3>\n          <span className='status'>{online ? \"Online\" : \"Offline\"}</span>\n        </div>\n      </div>\n      <div className='chat-actions'>\n        <button className='action-btn'>\n          <Fa.FaPhone />\n        </button>\n        <button className='action-btn'>\n          <Fa.FaVideo />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatHeader;\n","import React from \"react\";\nimport { FaComments } from \"react-icons/fa\";\nimport { IoCheckmarkDone, IoCheckmark } from \"react-icons/io5\";\n\nconst ChatMessages = ({\n  messages = [],\n  hasMessages,\n  typingUsers,\n  user,\n  messagesEndRef,\n}) => {\n  return (\n    <div className='messages-container'>\n      <div className='messages'>\n        {hasMessages ? (\n          messages.map((msg) => (\n            <div\n              key={msg.id}\n              className={`message ${msg.isOwn ? \"own\" : \"other\"}`}\n            >\n              <div className='message-content'>\n                {msg.messageType === \"image\" && msg.fileUrl ? (\n                  <img\n                    src={msg.fileUrl}\n                    alt={msg.message || \"image\"}\n                    className='chat-media-message'\n                  />\n                ) : msg.messageType === \"video\" && msg.fileUrl ? (\n                  <video\n                    src={msg.fileUrl}\n                    controls\n                    className='chat-media-message'\n                  />\n                ) : (\n                  <p>{msg.message}</p>\n                )}\n                <span className='message-time'>{msg.time}</span>\n              </div>\n            </div>\n          ))\n        ) : (\n          <div className='start-chat-message'>\n            <div className='start-chat-content'>\n              <FaComments />\n              <h3>Start a conversation</h3>\n              <p>\n                Send a message to begin chatting with{\" \"}\n                {user.name || user.username}\n              </p>\n            </div>\n          </div>\n        )}\n        {typingUsers && typingUsers.size > 0 && (\n          <div className='message other typing-message'>\n            <div className='message-content'>\n              <p className='typing-indicator'>is typing...</p>\n            </div>\n          </div>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatMessages;\n","import { useRef } from \"react\";\nimport * as Fa from \"react-icons/fa\";\n\nconst ChatInput = ({\n  messageInput,\n  onInputChange,\n  onKeyPress,\n  onSend,\n  disabled,\n  onAttach,\n  attachedFiles = [],\n  onRemoveFile,\n  isUploading = false,\n}) => {\n  const fileInputRef = useRef(null);\n\n  // Helper function to format file size\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  };\n\n  return (\n    <div className='message-input-container'>\n      {/* File Preview Section */}\n      {attachedFiles.length > 0 && (\n        <div className='file-preview-container'>\n          <div className='file-preview-list'>\n            {attachedFiles.map((fileData) => (\n              <div key={fileData.id} className='file-preview-item'>\n                <div className='file-preview-content'>\n                  {fileData.type.startsWith(\"image/\") ? (\n                    <img\n                      src={fileData.preview}\n                      alt={fileData.name}\n                      className='file-preview-image'\n                    />\n                  ) : (\n                    <div className='file-preview-icon'>{fileData.icon}</div>\n                  )}\n                  <div className='file-preview-info'>\n                    <div className='file-name'>{fileData.name}</div>\n                    <div className='file-size'>\n                      {formatFileSize(fileData.size)}\n                    </div>\n                  </div>\n                </div>\n                <button\n                  className='remove-file-btn'\n                  onClick={() => onRemoveFile(fileData.id)}\n                  disabled={isUploading}\n                >\n                  <Fa.FaTimes />\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      <div className='message-input-wrapper'>\n        <button\n          className='attach-btn'\n          onClick={() => fileInputRef.current.click()}\n          disabled={disabled || isUploading}\n        >\n          <Fa.FaPaperclip />\n        </button>\n\n        <input\n          type='file'\n          multiple\n          ref={fileInputRef}\n          style={{ display: \"none\" }}\n          onChange={onAttach}\n          disabled={disabled || isUploading}\n        />\n\n        <textarea\n          className='message-textarea'\n          placeholder={isUploading ? \"Uploading files...\" : \"Type a message...\"}\n          value={messageInput}\n          onChange={onInputChange}\n          onKeyDown={onKeyPress}\n          rows={1}\n          disabled={disabled || isUploading}\n        />\n\n        <button\n          className='send-btn'\n          onClick={onSend}\n          disabled={\n            (!messageInput.trim() && attachedFiles.length === 0) ||\n            disabled ||\n            isUploading\n          }\n        >\n          <Fa.FaPaperPlane />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInput;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Layout from \"../../components/layout/Layout\";\nimport \"./message.scss\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { useSocket } from \"../../context/SocketContext\";\nimport { useSelector } from \"react-redux\";\nimport {\n  useGetChatsQuery,\n  useGetChatMessagesQuery,\n  useCreateChatMutation,\n  useMarkChatAsReadMutation,\n  useUploadChatFileMutation,\n} from \"../../services/api/chat/chatApi\";\nimport { useGetFriendsQuery } from \"../../services/api/friendship/FriendshipApi\";\nimport ChatList from \"./ChatList\";\nimport ChatHeader from \"./ChatHeader\";\nimport ChatMessages from \"./ChatMessages\";\nimport ChatInput from \"./ChatInput\";\nimport { toast } from \"react-toastify\";\nimport { IoChatbubblesOutline } from \"react-icons/io5\";\nimport { FaTimes, FaFile, FaImage, FaVideo, FaMusic } from \"react-icons/fa\";\n\nconst Message = () => {\n  const [selectedChat, setSelectedChat] = useState(null);\n  const [messageInput, setMessageInput] = useState(\"\");\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);\n  const [searchParams] = useSearchParams();\n  const [typingUsers, setTypingUsers] = useState(new Set());\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showSearchResults, setShowSearchResults] = useState(false);\n  const [pendingFriend, setPendingFriend] = useState(null);\n  const [attachedFiles, setAttachedFiles] = useState([]);\n  const [isUploading, setIsUploading] = useState(false);\n\n  const { socket, isConnected, onlineUsers } = useSocket();\n  const { user } = useSelector((state) => state.user);\n\n  // Debug socket connection\n\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n\n  // RTK Query hooks\n  const { data: chats = [], refetch: refetchChats } = useGetChatsQuery();\n  const { data: messages = [], refetch: refetchMessages } =\n    useGetChatMessagesQuery(selectedChat?.id, { skip: !selectedChat?.id });\n  const { data: friendsData } = useGetFriendsQuery();\n  const [createChat, { error }] = useCreateChatMutation();\n  const [markAsRead] = useMarkChatAsReadMutation();\n  const [uploadFile] = useUploadChatFileMutation();\n\n  useEffect(() => {\n    const handleResize = () => setIsMobile(window.innerWidth <= 768);\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  // Auto select chat if friendId is in query params\n  useEffect(() => {\n    const friendId = searchParams.get(\"friendId\");\n    if (friendId) {\n      const chat = chats.find(\n        (c) => String(c.participantId) === String(friendId)\n      );\n      if (chat) {\n        setSelectedChat(chat);\n      } else {\n        // For new chats from URL, set pendingFriend to trigger chat creation when message is sent\n        // We need to get the friend data first\n        const friends = friendsData?.friends || [];\n        const friend = friends.find((f) => String(f.id) === String(friendId));\n        if (friend) {\n          setPendingFriend(friend);\n        }\n      }\n    }\n  }, [searchParams, chats, friendsData, createChat]);\n\n  // Socket.IO event listeners\n  useEffect(() => {\n    if (!socket) return;\n\n    // Join chat room when chat is selected\n    if (selectedChat?.id) {\n      socket.emit(\"joinChat\", selectedChat.id);\n      markAsRead(selectedChat.id);\n\n      // Refetch messages when chat is selected\n      refetchMessages();\n    }\n\n    // Listen for new messages\n    socket.on(\"newMessage\", (data) => {\n      if (data.chatId === selectedChat?.id) {\n        refetchMessages();\n      }\n      refetchChats();\n    });\n\n    // Listen for socket errors\n    socket.on(\"error\", (error) => {\n      toast.error(\"Socket error: \" + error.message);\n    });\n\n    // Listen for chat updates\n    socket.on(\"chatUpdated\", (data) => {\n      refetchChats();\n    });\n\n    // Listen for typing indicators\n    socket.on(\"userTyping\", (data) => {\n      if (data.chatId === selectedChat?.id) {\n        setTypingUsers((prev) => new Set([...prev, data.userId]));\n      }\n    });\n\n    socket.on(\"userStopTyping\", (data) => {\n      if (data.chatId === selectedChat?.id) {\n        setTypingUsers((prev) => {\n          const newSet = new Set(prev);\n          newSet.delete(data.userId);\n          return newSet;\n        });\n      }\n    });\n\n    return () => {\n      if (selectedChat?.id) {\n        socket.emit(\"leaveChat\", selectedChat.id);\n      }\n      socket.off(\"newMessage\");\n      socket.off(\"chatUpdated\");\n      socket.off(\"userTyping\");\n      socket.off(\"userStopTyping\");\n    };\n  }, [socket, selectedChat, refetchMessages, refetchChats, markAsRead]);\n\n  // Auto scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages, typingUsers]);\n\n  // Filter friends based on search query\n  const friends = friendsData?.friends || [];\n  const filteredFriends = friends.filter(\n    (friend) =>\n      friend.username.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      friend.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      friend.lastName.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleSendMessage = async () => {\n    if (\n      (!messageInput.trim() && attachedFiles.length === 0) ||\n      !socket ||\n      !isConnected ||\n      !user\n    ) {\n      return;\n    }\n\n    if (isUploading) {\n      toast.info(\"Please wait, files are being uploaded...\");\n      return;\n    }\n\n    setIsUploading(true);\n\n    try {\n      // Upload files first if any\n      let uploadedFiles = [];\n      if (attachedFiles.length > 0) {\n        const uploadPromises = attachedFiles.map(async (fileData) => {\n          try {\n            const result = await uploadFile(fileData.file).unwrap();\n            return {\n              fileUrl: result.fileUrl,\n              fileName: fileData.name,\n              fileType: fileData.type,\n            };\n          } catch (error) {\n            console.error(\"Error uploading file:\", error);\n            throw new Error(`Failed to upload ${fileData.name}`);\n          }\n        });\n\n        uploadedFiles = await Promise.all(uploadPromises);\n      }\n\n      // If chat already exists, send message as usual\n      if (selectedChat) {\n        console.log(\"Sending message to existing chat:\", selectedChat.id);\n\n        // Send text message if there's text content\n        if (messageInput.trim()) {\n          socket.emit(\"sendMessage\", {\n            chatId: selectedChat.id,\n            content: messageInput.trim(),\n            messageType: \"text\",\n          });\n        }\n\n        // Send file messages if there are uploaded files\n        for (const fileData of uploadedFiles) {\n          socket.emit(\"sendMessage\", {\n            chatId: selectedChat.id,\n            content: fileData.fileName,\n            messageType: fileData.fileType.startsWith(\"image/\")\n              ? \"image\"\n              : fileData.fileType.startsWith(\"video/\")\n              ? \"video\"\n              : fileData.fileType.startsWith(\"audio/\")\n              ? \"audio\"\n              : \"file\",\n            fileUrl: fileData.fileUrl,\n          });\n        }\n\n        setMessageInput(\"\");\n        setAttachedFiles([]);\n        socket.emit(\"stopTyping\", { chatId: selectedChat.id });\n        if (typingTimeoutRef.current) clearTimeout(typingTimeoutRef.current);\n        return;\n      }\n\n      // If chat does not exist but pendingFriend exists, create chat and send message after\n      if (pendingFriend) {\n        // Ensure participantId is defined\n        if (!pendingFriend.id) {\n          toast.error(\n            \"No participantId found for pendingFriend! Check console for details.\"\n          );\n          return;\n        }\n        try {\n          const result = await createChat({ participantId: pendingFriend.id });\n          if (result.error) {\n            alert(\"Create chat failed: \" + JSON.stringify(result.error));\n            return;\n          }\n          let chatId = null;\n          let newChat = null;\n\n          if (result.data && result.data.id) {\n            chatId = result.data.id;\n            newChat = result.data;\n          } else if (result.data && result.data._id) {\n            chatId = result.data._id;\n            newChat = result.data;\n          } else {\n            // fallback: refetch chats and find the new one\n\n            const refreshed = await refetchChats();\n            newChat = (refreshed.data || []).find(\n              (chat) =>\n                chat.participantId &&\n                chat.participantId.toString() === pendingFriend.id.toString()\n            );\n            if (newChat) {\n              chatId = newChat.id;\n            }\n          }\n\n          if (chatId && newChat) {\n            // Set the selected chat first\n            setSelectedChat(newChat);\n            setPendingFriend(null);\n\n            // Join the chat room\n            socket.emit(\"joinChat\", chatId);\n\n            // Small delay to ensure socket events are processed\n            setTimeout(() => {\n              // Send text message if there's text content\n              if (messageInput.trim()) {\n                socket.emit(\"sendMessage\", {\n                  chatId,\n                  content: messageInput.trim(),\n                  messageType: \"text\",\n                });\n              }\n\n              // Send file messages if there are uploaded files\n              for (const fileData of uploadedFiles) {\n                socket.emit(\"sendMessage\", {\n                  chatId,\n                  content: fileData.fileName,\n                  messageType: fileData.fileType.startsWith(\"image/\")\n                    ? \"image\"\n                    : fileData.fileType.startsWith(\"video/\")\n                    ? \"video\"\n                    : fileData.fileType.startsWith(\"audio/\")\n                    ? \"audio\"\n                    : \"file\",\n                  fileUrl: fileData.fileUrl,\n                });\n              }\n\n              setMessageInput(\"\");\n              setAttachedFiles([]);\n              socket.emit(\"stopTyping\", { chatId });\n              if (typingTimeoutRef.current)\n                clearTimeout(typingTimeoutRef.current);\n            }, 100);\n          } else {\n            // Clear the pending friend if chat creation failed\n            setPendingFriend(null);\n          }\n        } catch (error) {\n          toast.error(\"Error creating chat and sending message:\", error);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      toast.error(\"Error sending message: \" + error.message);\n    } finally {\n      setIsUploading(false);\n    }\n\n    // If chat does not exist but pendingFriend exists, create chat and send message after\n    if (pendingFriend) {\n      // Ensure participantId is defined\n      if (!pendingFriend.id) {\n        toast.error(\n          \"No participantId found for pendingFriend! Check console for details.\"\n        );\n        return;\n      }\n      try {\n        const result = await createChat({ participantId: pendingFriend.id });\n        if (result.error) {\n          alert(\"Create chat failed: \" + JSON.stringify(result.error));\n          return;\n        }\n        let chatId = null;\n        let newChat = null;\n\n        if (result.data && result.data.id) {\n          chatId = result.data.id;\n          newChat = result.data;\n        } else if (result.data && result.data._id) {\n          chatId = result.data._id;\n          newChat = result.data;\n        } else {\n          // fallback: refetch chats and find the new one\n\n          const refreshed = await refetchChats();\n          newChat = (refreshed.data || []).find(\n            (chat) =>\n              chat.participantId &&\n              chat.participantId.toString() === pendingFriend.id.toString()\n          );\n          if (newChat) {\n            chatId = newChat.id;\n          }\n        }\n\n        if (chatId && newChat) {\n          // Set the selected chat first\n          setSelectedChat(newChat);\n          setPendingFriend(null);\n\n          // Join the chat room\n          socket.emit(\"joinChat\", chatId);\n\n          // Small delay to ensure socket events are processed\n          setTimeout(() => {\n            socket.emit(\"sendMessage\", {\n              chatId,\n              content: messageInput.trim(),\n              messageType: \"text\",\n            });\n            setMessageInput(\"\");\n            socket.emit(\"stopTyping\", { chatId });\n            if (typingTimeoutRef.current)\n              clearTimeout(typingTimeoutRef.current);\n          }, 100);\n        } else {\n          // Clear the pending friend if chat creation failed\n          setPendingFriend(null);\n        }\n      } catch (error) {\n        toast.error(\"Error creating chat and sending message:\", error);\n      }\n    }\n  };\n\n  // Helper function to get file type icon\n  const getFileIcon = (fileType) => {\n    if (fileType.startsWith(\"image/\")) return <FaImage />;\n    if (fileType.startsWith(\"video/\")) return <FaVideo />;\n    if (fileType.startsWith(\"audio/\")) return <FaMusic />;\n    return <FaFile />;\n  };\n\n  // Helper function to format file size\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  };\n\n  // Helper function to create file preview\n  const createFilePreview = (file) => {\n    return new Promise((resolve) => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        resolve({\n          id: Date.now() + Math.random(),\n          file,\n          preview: e.target.result,\n          name: file.name,\n          size: file.size,\n          type: file.type,\n          icon: getFileIcon(file.type),\n        });\n      };\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const handleAttach = async (e) => {\n    const files = Array.from(e.target.files);\n    if (files.length === 0) return;\n\n    // Validate file sizes (max 10MB per file)\n    const maxSize = 10 * 1024 * 1024; // 10MB\n    const validFiles = files.filter((file) => {\n      if (file.size > maxSize) {\n        toast.error(`File ${file.name} is too large. Maximum size is 10MB.`);\n        return false;\n      }\n      return true;\n    });\n\n    if (validFiles.length === 0) return;\n\n    try {\n      // Create previews for all valid files\n      const filePreviews = await Promise.all(\n        validFiles.map((file) => createFilePreview(file))\n      );\n\n      setAttachedFiles((prev) => [...prev, ...filePreviews]);\n      toast.success(`${validFiles.length} file(s) attached successfully`);\n    } catch (error) {\n      console.error(\"Error creating file previews:\", error);\n      toast.error(\"Error attaching files\");\n    }\n\n    // Clear the input\n    e.target.value = \"\";\n  };\n\n  const removeAttachedFile = (fileId) => {\n    setAttachedFiles((prev) => prev.filter((file) => file.id !== fileId));\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handleInputChange = (e) => {\n    setMessageInput(e.target.value);\n\n    // Emit typing indicator only if we have a selected chat\n    if (socket && selectedChat) {\n      socket.emit(\"typing\", { chatId: selectedChat.id });\n\n      // Clear previous timeout\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n\n      // Set timeout to stop typing indicator\n      typingTimeoutRef.current = setTimeout(() => {\n        socket.emit(\"stopTyping\", { chatId: selectedChat.id });\n      }, 1000);\n    }\n  };\n\n  const handleBack = () => {\n    setSelectedChat(null);\n    setTypingUsers(new Set());\n    setShowSearchResults(false);\n    setSearchQuery(\"\");\n    setPendingFriend(null);\n    setAttachedFiles([]);\n  };\n\n  const handleChatSelect = (chat) => {\n    setSelectedChat(chat);\n    setTypingUsers(new Set());\n    setShowSearchResults(false);\n    setSearchQuery(\"\");\n    setPendingFriend(null);\n    setAttachedFiles([]);\n    if (socket) {\n      socket.emit(\"joinChat\", chat.id);\n      markAsRead(chat.id);\n    }\n  };\n\n  const handleFriendSelect = async (friend) => {\n    setSearchQuery(\"\");\n    setShowSearchResults(false);\n    setPendingFriend(friend);\n    setAttachedFiles([]);\n\n    // Find existing chat with this friend\n    const existingChat = chats.find(\n      (chat) =>\n        chat.participantId &&\n        chat.participantId.toString() === friend.id.toString()\n    );\n\n    if (existingChat) {\n      setSelectedChat(existingChat);\n      setTypingUsers(new Set());\n      setPendingFriend(null);\n      if (socket) {\n        socket.emit(\"joinChat\", existingChat.id);\n        markAsRead(existingChat.id);\n      }\n      return;\n    }\n\n    // For new chats, just set pendingFriend and let handleSendMessage handle the creation\n    // This ensures the chat is created only when the user actually sends a message\n    setPendingFriend(friend);\n  };\n\n  const handleSearchChange = (e) => {\n    const query = e.target.value;\n    setSearchQuery(query);\n    setShowSearchResults(query.length > 0);\n  };\n\n  const handleSearchFocus = () => {\n    if (searchQuery.length > 0) {\n      setShowSearchResults(true);\n    }\n  };\n\n  const handleSearchBlur = () => {\n    // Delay hiding search results to allow clicking on items\n    setTimeout(() => {\n      setShowSearchResults(false);\n    }, 200);\n  };\n\n  // Check if selected chat has messages\n  const hasMessages = messages && messages.length > 0;\n\n  // Render logic: show chat panel if selectedChat or pendingFriend exists\n  const showChatPanel = selectedChat || pendingFriend;\n  const chatUser = selectedChat || pendingFriend;\n  const chatUserId = chatUser?.participantId || chatUser?.id;\n  const isChatOnline = chatUserId && onlineUsers.has(chatUserId);\n\n  return (\n    <Layout>\n      <div className='message-container'>\n        {isMobile ? (\n          showChatPanel ? (\n            <div className='chat-history'>\n              <ChatHeader\n                user={chatUser}\n                isMobile={true}\n                onBack={handleBack}\n                online={isChatOnline}\n              />\n              <ChatMessages\n                messages={messages}\n                hasMessages={selectedChat && hasMessages}\n                typingUsers={typingUsers}\n                user={chatUser}\n                messagesEndRef={messagesEndRef}\n              />\n              <ChatInput\n                messageInput={messageInput}\n                onInputChange={handleInputChange}\n                onKeyPress={handleKeyPress}\n                onSend={handleSendMessage}\n                onAttach={handleAttach}\n                attachedFiles={attachedFiles}\n                onRemoveFile={removeAttachedFile}\n                isUploading={isUploading}\n                disabled={!(selectedChat || pendingFriend)}\n              />\n            </div>\n          ) : (\n            <ChatList\n              chats={chats}\n              filteredFriends={filteredFriends}\n              searchQuery={searchQuery}\n              onSearchChange={handleSearchChange}\n              onSearchFocus={handleSearchFocus}\n              onSearchBlur={handleSearchBlur}\n              onFriendSelect={handleFriendSelect}\n              onChatSelect={handleChatSelect}\n              selectedChat={selectedChat}\n              showSearchResults={showSearchResults}\n              onlineUsers={onlineUsers}\n            />\n          )\n        ) : (\n          <>\n            <ChatList\n              chats={chats}\n              filteredFriends={filteredFriends}\n              searchQuery={searchQuery}\n              onSearchChange={handleSearchChange}\n              onSearchFocus={handleSearchFocus}\n              onSearchBlur={handleSearchBlur}\n              onFriendSelect={handleFriendSelect}\n              onChatSelect={handleChatSelect}\n              selectedChat={selectedChat}\n              showSearchResults={showSearchResults}\n              onlineUsers={onlineUsers}\n            />\n            <div className='chat-history'>\n              {showChatPanel ? (\n                <>\n                  <ChatHeader\n                    user={chatUser}\n                    isMobile={false}\n                    onBack={handleBack}\n                    online={isChatOnline}\n                  />\n                  <ChatMessages\n                    messages={messages}\n                    hasMessages={selectedChat && hasMessages}\n                    typingUsers={typingUsers}\n                    user={chatUser}\n                    messagesEndRef={messagesEndRef}\n                  />\n                  <ChatInput\n                    messageInput={messageInput}\n                    onInputChange={handleInputChange}\n                    onKeyPress={handleKeyPress}\n                    onSend={handleSendMessage}\n                    onAttach={handleAttach}\n                    attachedFiles={attachedFiles}\n                    onRemoveFile={removeAttachedFile}\n                    isUploading={isUploading}\n                    disabled={!(selectedChat || pendingFriend)}\n                  />\n                </>\n              ) : (\n                <div className='no-chat-selected'>\n                  <div className='no-chat-content'>\n                    <span>\n                      <IoChatbubblesOutline />\n                    </span>\n                    <h3>Select a conversation</h3>\n                    <p>Choose a chat from the list to start messaging</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    </Layout>\n  );\n};\n\nexport default Message;\n"],"names":["ChatList","chats","filteredFriends","searchQuery","onSearchChange","onSearchFocus","onSearchBlur","onFriendSelect","onChatSelect","selectedChat","showSearchResults","onlineUsers","Set","jsxs","className","children","jsx","jsxRuntimeExports","type","placeholder","value","onChange","onFocus","onBlur","length","map","friend","onClick","src","profilePicture","alt","username","has","id","firstName","lastName","chat","avatar","name","participantId","time","style","fontStyle","lastMessageType","lastMessage","unread","ChatHeader","user","isMobile","onBack","online","Fa.FaArrowLeft","Fa.FaPhone","Fa.FaVideo","ChatMessages","messages","hasMessages","typingUsers","messagesEndRef","msg","isOwn","messageType","fileUrl","message","controls","FaComments","size","ref","ChatInput","messageInput","onInputChange","onKeyPress","onSend","disabled","onAttach","attachedFiles","onRemoveFile","isUploading","fileInputRef","useRef","formatFileSize","bytes","i","Math","floor","log","parseFloat","pow","toFixed","fileData","startsWith","preview","icon","Fa.FaTimes","current","click","Fa.FaPaperclip","multiple","display","onKeyDown","rows","trim","Fa.FaPaperPlane","Message","setSelectedChat","useState","setMessageInput","setIsMobile","window","innerWidth","searchParams","useSearchParams","setTypingUsers","setSearchQuery","setShowSearchResults","pendingFriend","setPendingFriend","setAttachedFiles","setIsUploading","socket","isConnected","useSocket","useSelector","state","typingTimeoutRef","data","refetch","refetchChats","useGetChatsQuery","refetchMessages","useGetChatMessagesQuery","skip","friendsData","useGetFriendsQuery","createChat","error","useCreateChatMutation","markAsRead","useMarkChatAsReadMutation","uploadFile","useUploadChatFileMutation","useEffect","handleResize","addEventListener","removeEventListener","friendId","get","find","c","String","friends","f","emit","on","chatId","y","prev","userId","newSet","delete","off","_a","scrollIntoView","behavior","filter","toLowerCase","includes","handleSendMessage","async","toast","info","uploadedFiles","uploadPromises","file","unwrap","fileName","fileType","console","Error","Promise","all","content","clearTimeout","result","alert","JSON","stringify","newChat","_id","toString","setTimeout","handleAttach","e","files","Array","from","target","validFiles","filePreviews","resolve","reader","FileReader","onload","Date","now","random","FaImage","FaVideo","FaMusic","FaFile","readAsDataURL","createFilePreview","success","removeAttachedFile","fileId","handleKeyPress","key","shiftKey","preventDefault","handleInputChange","handleBack","handleChatSelect","handleFriendSelect","existingChat","handleSearchChange","query","handleSearchFocus","handleSearchBlur","showChatPanel","chatUser","chatUserId","isChatOnline","Layout","Fragment","IoChatbubblesOutline"],"mappings":"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"}